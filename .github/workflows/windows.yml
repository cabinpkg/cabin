name: Windows

on: [push, pull_request]
env:
  LIBGIT2_VERSION: 0.28.4
  TOML11_VERSION: 3.6.0
  LIBSSL_VERSION: 1.1.1.4

jobs:
  win32-vs2019:
    name: Visual Studio 2019
    runs-on: windows-2019
    strategy:
      matrix:
        build_type: [ Debug, Release ]
    env:
      GENERATOR: 'Visual Studio 16 2019'
    steps:
      - uses: actions/checkout@v1

      - name: Restore & Cache libgit2
        uses: actions/cache@v1
        id: libgit2-cache
        with:
          path: 'C:/Program Files (x86)/libgit2'
          key: ${{ runner.os }}-vs2019-${{ matrix.build_type }}-libgit2-${{ env.LIBGIT2_VERSION }}
      - name: Install libgit2 (${{ env.LIBGIT2_VERSION }})
        if: steps.libgit2-cache.outputs.cache-hit != 'true'
        run: |
          git clone -q -b v${{ env.LIBGIT2_VERSION }} https://github.com/libgit2/libgit2.git
          mkdir libgit2/build
          cd libgit2/build
          cmake .. -G "${{ env.GENERATOR }}"
          cmake --build . --target install --config ${{ matrix.build_type }}
        working-directory: ${{ runner.temp }}

      - name: Restore & Cache toml11
        uses: actions/cache@v1
        id: toml11-cache
        with:
          path: 'C:/Program Files (x86)/toml11'
          key: ${{ runner.os }}-vs2019-${{ matrix.build_type }}-toml11-${{ env.TOML11_VERSION }}
      - name: Install toml11 (${{ env.TOML11_VERSION }})
        if: steps.toml11-cache.outputs.cache-hit != 'true'
        run: |
          git clone -q -b v${{ env.TOML11_VERSION }} https://github.com/ToruNiina/toml11.git
          mkdir toml11/build
          cd toml11/build
          cmake .. -G "${{ env.GENERATOR }}" -Dtoml11_BUILD_TEST=OFF
          cmake --build . --target install --config ${{ matrix.build_type }}
        working-directory: ${{ runner.temp }}

      - name: Restore & Cache libssl
        uses: actions/cache@v1
        id: libssl-cache
        with:
          path: 'C:/Program Files/OpenSSL-Win64'
          key: ${{ runner.os }}-vs2019-${{ matrix.build_type }}-libssl-${{ env.LIBSSL_VERSION }}
      - name: Install libssl (${{ env.LIBSSL_VERSION }})
        if: steps.libssl-cache.outputs.cache-hit != 'true'
        run: choco install openssl --version ${{ env.LIBSSL_VERSION }}

#      - name: Build Poac
#        run: |
#          mkdir build
#          cd build
#          cmake .. -G "${{ env.GENERATOR }}"              `
#            -Dpoac_BUILD_TEST=OFF                         `
#            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}   `
#            -DGIT2_DIR="C:/Program Files (x86)/libgit2"   `
#            -DTOML11_DIR="C:/Program Files (x86)/toml11/" `
#            -DBoost_INCLUDE_DIR="$env:BOOST_ROOT_1_69_0/include"
#          cmake --build . --target install --config ${{ matrix.build_type }}

#      - name: Upload pre-built binary
#        uses: actions/upload-artifact@v1
#        if: matrix.build_type == 'Release'
#        with:
#          name: ${{ github.job }}
#          path: 'C:/Program Files (x86)/poac/bin/poac.exe'

# TODO: https://github.com/poacpm/poac/pull/190/checks?check_run_id=345212483
  # See also: https://github.com/actions/virtual-environments/issues/111
#  win32-mingw-8:
#    name: MinGW 8.1.0
#    runs-on: windows-2019
#    strategy:
#      matrix:
#        build_type: [Debug, Release]
#    env:
#      GENERATOR: 'MinGW Makefiles'
#    steps:
#      - uses: actions/checkout@v1
#
#      - name: libgit2 cache
#        uses: actions/cache@v1
#        id: libgit2-cache
#        with:
#          path: 'C:/Program Files (x86)/libgit2'
#          key: ${{ runner.os }}-mingw-8-${{ matrix.build_type }}-libgit2-${{ env.LIBGIT2_VERSION }}
#      - name: Install libgit2
#        if: steps.libgit2-cache.outputs.cache-hit != 'true'
#        run: |
#          git clone -q -b v${{ env.LIBGIT2_VERSION }} https://github.com/libgit2/libgit2.git
#          mkdir libgit2/build
#          cd libgit2/build
#          cmake .. -G "${{ env.GENERATOR }}" -DCMAKE_SH=CMAKE_SH-NOTFOUND
#          mingw32-make
#          mingw32-make install
#        working-directory: ${{ runner.temp }}
#
#      - name: toml11 cache
#        uses: actions/cache@v1
#        id: toml11-cache
#        with:
#          path: 'C:/Program Files (x86)/toml11'
#          key: ${{ runner.os }}-mingw-8-${{ matrix.build_type }}-toml11-${{ env.TOML11_VERSION }}
#      - name: Install toml11
#        if: steps.toml11-cache.outputs.cache-hit != 'true'
#        run: |
#          git clone -q -b v${{ env.TOML11_VERSION }} https://github.com/ToruNiina/toml11.git
#          mkdir toml11/build
#          cd toml11/build
#          cmake .. -G "${{ env.GENERATOR }}" -Dtoml11_BUILD_TEST=OFF -DCMAKE_SH=CMAKE_SH-NOTFOUND
#          mingw32-make install
#        working-directory: ${{ runner.temp }}
#
#      - name: Build
#        run: |
#          mkdir build
#          cd build
#          cmake .. -G "${{ env.GENERATOR }}" `
#            -DCMAKE_SH=CMAKE_SH-NOTFOUND `
#            -Dpoac_BUILD_TEST=OFF `
#            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
#            -DGIT2_DIR="C:/Program Files (x86)/libgit2" `
#            -DTOML11_DIR="C:/Program Files (x86)/toml11/"
#          mingw32-make
#          mingw32-make install
#
#      - uses: actions/upload-artifact@v1
#        if: matrix.build_type == 'Release'
#        with:
#          name: mingw
#          path: 'C:/Program Files (x86)/poac/bin/poac.exe'
