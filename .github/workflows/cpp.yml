name: C++

on:
  push:
    branches: [main]
  pull_request:

env:
  CABIN_TERM_COLOR: always
  CXX: g++  # default compiler to build
  LLVM_VER: 20

permissions:
  contents: read

jobs:
  apple-clang:
    name: "build & test (macOS ${{ matrix.osver }} - Apple Clang - ${{ matrix.build }})"
    runs-on: macos-${{ matrix.os }}
    strategy:
      matrix:
        osver: [14, 15, 26]
        build: [dev, release]
    env:
      CXX: c++
    steps:
      - uses: actions/checkout@v5

      - name: Setup macOS dependencies
        uses: ./.github/actions/setup-macos-deps

      - name: Build & Test
        uses: ./.github/actions/build-test
        with:
          build: ${{ matrix.build }}
          coverage: false

  clang:
    name: "build & test (Linux - Clang ${{ matrix.ver }} - ${{ matrix.build }})"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build: [dev, release]
        ver: [18, 19, 20]
    container:
      image: ubuntu:25.04
    env:
      CXX: clang++-${{ matrix.ver }}
    steps:
      - uses: actions/checkout@v5

      - name: Setup Clang
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x ./llvm.sh
          sudo ./llvm.sh "${{ matrix.ver }}"

      - name: Setup Ubuntu dependencies
        uses: ./.github/actions/setup-ubuntu-deps

      - name: Build & Test
        uses: ./.github/actions/build-and-test
        with:
          build: ${{ matrix.build }}
          coverage: false

  build-and-test:
    name: "build & test (${{ matrix.cxx.name }} - ${{ matrix.build }}${{ matrix.coverage && ' - coverage' || '' }})"
    runs-on: ${{ matrix.cxx.os }}
    strategy:
      fail-fast: false
      matrix:
        build: [dev, release]
        coverage: [false]
        cxx:
          - name: "Linux - Clang 18"
            cmd: clang++-18
            os: ubuntu-24.04
          - name: "Linux - Clang 19"
            cmd: clang++-19
            os: ubuntu-24.04
          - name: "Linux - Clang 20"
            cmd: clang++-20
            os: ubuntu-24.04
          - name: "Linux - GCC 12"
            cmd: g++-12
            os: ubuntu-24.04
          - name: "Linux - GCC 13"
            cmd: g++-13
            os: ubuntu-24.04
          - name: "Linux - GCC 14"
            cmd: g++-14
            os: ubuntu-24.04
        include:
          # Coverage testing with GCC 14
          - build: dev
            coverage: true
            cxx:
              name: "Linux - GCC 14"
              cmd: g++-14
              os: ubuntu-24.04
    env:
      CXX: ${{ matrix.cxx.cmd }}
    steps:
      - uses: actions/checkout@v5

      - name: Setup Clang
        if: matrix.cxx.cmd == 'clang++-19' || matrix.cxx.cmd == 'clang++-20'
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x ./llvm.sh
          sudo ./llvm.sh "${CXX##*-}"

      - name: Setup Ubuntu dependencies
        if: runner.os == 'Linux'
        uses: ./.github/actions/setup-ubuntu-deps

      - name: Install lcov
        if: matrix.coverage
        run: sudo apt-get install -y lcov

      - name: Build & Test
        uses: ./.github/actions/build-and-test
        with:
          build: ${{ matrix.build }}
          coverage: ${{ matrix.coverage }}

      - name: Print coverage
        if: success() && matrix.coverage
        run: |
          lcov --capture --directory . --no-external \
               --gcov-tool "gcov-${CXX##*-}"         \
               --output-file coverage.info
          lcov --list coverage.info

  package-test:
    needs: build-and-test
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5

      - name: Setup Ubuntu dependencies
        uses: ./.github/actions/setup-ubuntu-deps

      - name: Build cabin
        run: make BUILD=release -j4

      - name: Install nFPM
        run: |
          echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | sudo tee /etc/apt/sources.list.d/goreleaser.list
          sudo apt-get update
          sudo apt-get install -y nfpm

      - name: Test DEB package creation
        run: nfpm pkg --packager deb
        env:
          CABIN_VERSION: 0.0.0+${{ github.sha }}

      - name: Test RPM package creation
        run: nfpm pkg --packager rpm
        env:
          CABIN_VERSION: 0.0.0+${{ github.sha }}

      - name: List created packages
        run: ls -la ./*.deb ./*.rpm

      - name: Verify package contents
        run: |
          dpkg-deb --contents ./*.deb | grep '/usr/bin/cabin'
          rpm -qlp ./*.rpm | grep '/usr/bin/cabin'

      - name: Test DEB package installation
        run: sudo dpkg -i ./*.deb

      - name: Create test project
        run: cabin new test_pj
        working-directory: ${{ runner.temp }}

      - name: Test cabin functionality
        run: cabin run | grep 'Hello, world!'
        working-directory: ${{ runner.temp }}/test_pj

  format:
    needs: build-and-test
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5

      - name: Setup dependencies
        uses: ./.github/actions/setup-ubuntu-deps

      - name: Build Cabin
        run: make BUILD=release -j4

      - name: Install clang-format-${{ env.LLVM_VER }}
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x ./llvm.sh
          sudo ./llvm.sh ${{ env.LLVM_VER }}
          sudo apt-get install -y clang-format-${{ env.LLVM_VER }}

      - name: cabin fmt
        run: ./build/cabin fmt --check -vv
        env:
          CABIN_FMT: clang-format-${{ env.LLVM_VER }}

  lint:
    needs: build-and-test
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5

      - name: Setup dependencies
        uses: ./.github/actions/setup-ubuntu-deps

      - name: Build Cabin
        run: make BUILD=release -j4

      - uses: actions/setup-python@v6
        with:
          python-version: '3.*'

      - name: Install cpplint
        run: pip install cpplint

      - name: Show cpplint version
        run: cpplint --version

      - name: cabin lint
        run: ./build/cabin lint -vv

  clang-tidy:
    needs: build-and-test
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5

      - name: Setup dependencies
        uses: ./.github/actions/setup-ubuntu-deps

      - name: Build Cabin
        run: make BUILD=release -j4

      - name: Install clang-tidy-${{ env.LLVM_VER }}
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x ./llvm.sh
          sudo ./llvm.sh ${{ env.LLVM_VER }}
          sudo apt-get install -y clang-tidy-${{ env.LLVM_VER }}

      - name: cabin tidy
        run: ./build/cabin tidy -vv
        env:
          CABIN_TIDY: run-clang-tidy-${{ env.LLVM_VER }}
