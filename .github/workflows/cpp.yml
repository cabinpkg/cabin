name: C++

on:
  push:
    branches: [main]
  pull_request:

env:
  CABIN_TERM_COLOR: always

permissions:
  contents: read

jobs:
  build-and-test:
    name: "build & test (${{ matrix.cxx.name }} - ${{ matrix.build }}${{ matrix.coverage && ' - coverage' || '' }})"
    runs-on: ${{ matrix.cxx.os }}
    strategy:
      fail-fast: false
      matrix:
        build: [dev, release]
        coverage: [false]
        cxx:
          - name: "Linux - Clang 18"
            cmd: clang++-18
            os: ubuntu-24.04
          - name: "Linux - Clang 19"
            cmd: clang++-19
            os: ubuntu-24.04
          - name: "Linux - Clang 20"
            cmd: clang++-20
            os: ubuntu-24.04
          - name: "Linux - GCC 12"
            cmd: g++-12
            os: ubuntu-24.04
          - name: "Linux - GCC 13"
            cmd: g++-13
            os: ubuntu-24.04
          - name: "Linux - GCC 14"
            cmd: g++-14
            os: ubuntu-24.04
          - name: "macOS 13 - Apple Clang"
            cmd: c++
            os: macos-13
          - name: "macOS 14 - Apple Clang"
            cmd: c++
            os: macos-14
          - name: "macOS 15 - Apple Clang"
            cmd: c++
            os: macos-15
        include:
          # Coverage testing with GCC 14
          - build: dev
            coverage: true
            cxx:
              name: "Linux - GCC 14"
              cmd: g++-14
              os: ubuntu-24.04
    env:
      CXX: ${{ matrix.cxx.cmd }}
    steps:
      - uses: actions/checkout@v5

      - name: Setup Clang
        if: matrix.cxx.cmd == 'clang++-19' || matrix.cxx.cmd == 'clang++-20'
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x ./llvm.sh
          sudo ./llvm.sh "${CXX##*-}"

      - name: Setup Ubuntu dependencies
        if: runner.os == 'Linux'
        uses: ./.github/actions/setup-ubuntu-deps

      - name: Install lcov
        if: matrix.coverage
        run: sudo apt-get install -y lcov

      - name: Setup macOS dependencies
        if: runner.os == 'macOS'
        uses: ./.github/actions/setup-macos-deps

      - name: Setup Sharness
        run: |
          wget https://raw.githubusercontent.com/felipec/sharness/refs/tags/v1.2.1/sharness.sh
          wget https://raw.githubusercontent.com/felipec/sharness/refs/tags/v1.2.1/lib-sharness/functions.sh
          mv sharness.sh tests/
          mkdir tests/lib-sharness
          mv functions.sh tests/lib-sharness/

      - name: Print versions
        run: make versions

      - name: Stage 1 - Build
        run: make BUILD=${{ matrix.build }} -j4

      - name: Stage 1 - Print version
        run: ./build/cabin version --verbose

      - name: Stage 1 - Test
        run: make BUILD=${{ matrix.build }} test -j4

      - name: Stage 1 - Integration Test
        run: find tests -maxdepth 1 -name '[0-9]*.sh' -print0 | xargs -0 -I {} sh -c 'sh {} -v'
        env:
          CABIN_TERM_COLOR: auto

      - name: Stage 2 - Build & Test
        run: |
          [[ '${{ matrix.build }}' == 'release' ]] && RELEASE='--release'
          [[ '${{ matrix.coverage }}' == 'true' ]] && COVERAGE='--coverage'
          # shellcheck disable=SC2086
          ./build/cabin --verbose run $RELEASE test --verbose $COVERAGE

      - name: Stage 2 - Print version
        run: ./cabin-out/${{ matrix.build }}/cabin version --verbose

      - name: Stage 2 - Integration Test
        run: find tests -maxdepth 1 -name '[0-9]*.sh' -print0 | xargs -0 -I {} sh -c 'sh {} -v'
        env:
          CABIN: ${{ github.workspace }}/cabin-out/${{ matrix.build }}/cabin
          CABIN_TERM_COLOR: auto

      - name: Print coverage
        if: success() && matrix.coverage
        run: |
          lcov --capture --directory . --no-external \
               --gcov-tool "gcov-${CXX##*-}"         \
               --output-file coverage.info
          lcov --list coverage.info

  package-test:
    needs: build-and-test
    runs-on: ubuntu-24.04
    env:
      CXX: g++-14
    steps:
      - uses: actions/checkout@v5

      - name: Setup Ubuntu dependencies
        uses: ./.github/actions/setup-ubuntu-deps

      - name: Build cabin
        run: make BUILD=release -j4

      - name: Install nFPM
        run: |
          echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | sudo tee /etc/apt/sources.list.d/goreleaser.list
          sudo apt-get update
          sudo apt-get install -y nfpm

      - name: Test DEB package creation
        run: nfpm pkg --packager deb
        env:
          CABIN_VERSION: 0.0.0+${{ github.sha }}

      - name: Test RPM package creation
        run: nfpm pkg --packager rpm
        env:
          CABIN_VERSION: 0.0.0+${{ github.sha }}

      - name: List created packages
        run: ls -la ./*.deb ./*.rpm

      - name: Verify package contents
        run: |
          dpkg-deb --contents ./*.deb | grep '/usr/bin/cabin'
          rpm -qlp ./*.rpm | grep '/usr/bin/cabin'

      - name: Test DEB package installation
        run: sudo dpkg -i ./*.deb

      - name: Create test project
        run: cabin new test_pj
        working-directory: ${{ runner.temp }}

      - name: Test cabin functionality
        run: cabin run | grep 'Hello, world!'
        working-directory: ${{ runner.temp }}/test_pj

  format:
    needs: build-and-test
    runs-on: ubuntu-24.04
    env:
      CXX: clang++-18
    steps:
      - uses: actions/checkout@v5

      - name: Setup dependencies
        uses: ./.github/actions/setup-ubuntu-deps

      - name: Build Cabin
        run: make BUILD=release -j4

      - name: Install clang-format-20
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x ./llvm.sh
          sudo ./llvm.sh 20
          sudo apt-get install -y clang-format-20

      - name: cabin fmt
        run: ./build/cabin fmt --check --verbose
        env:
          CABIN_FMT: clang-format-20

  lint:
    needs: build-and-test
    runs-on: ubuntu-24.04
    env:
      CXX: clang++-18
    steps:
      - uses: actions/checkout@v5

      - name: Setup dependencies
        uses: ./.github/actions/setup-ubuntu-deps

      - name: Build Cabin
        run: make BUILD=release -j4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.*'

      - name: Install cpplint
        run: pip install cpplint

      - name: Show cpplint version
        run: cpplint --version

      - name: cabin lint
        run: ./build/cabin lint --verbose

  clang-tidy:
    needs: build-and-test
    runs-on: ubuntu-24.04
    env:
      CXX: clang++-18
    steps:
      - uses: actions/checkout@v5

      - name: Setup dependencies
        uses: ./.github/actions/setup-ubuntu-deps

      - name: Build Cabin
        run: make BUILD=release -j4

      - name: Install clang-tidy-20
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x ./llvm.sh
          sudo ./llvm.sh 20
          sudo apt-get install -y clang-tidy-20

      - name: cabin tidy
        run: ./build/cabin tidy --verbose
        env:
          CABIN_TIDY: clang-tidy-20
