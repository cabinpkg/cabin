name: Linux

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build-and-test:
    name: "build & test"
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        build_type: [ Debug, Release ]
        coverage: [ off ]
        compiler:
          - cc: clang-12
            cxx: clang++-12
            subpackage: lld-12
          - cc: clang-13
            cxx: clang++-13
            subpackage: lld-13
          - cc: clang-14
            cxx: clang++-14
            subpackage: lld-14
          - cc: gcc-11
            cxx: g++-11
          - cc: gcc-12
            cxx: g++-12
        include:
          - build_type: Debug
            coverage: on
            compiler:
              cc: gcc-12
              cxx: g++-12
              subpackage: lcov
    env:
      CC: ${{ matrix.compiler.cc }}
      CXX: ${{ matrix.compiler.cxx }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup GCC
        if: startsWith(matrix.compiler.cc, 'gcc')
        run: sudo apt-get install -y ${{ matrix.compiler.cxx }}

      - name: Setup Clang
        if: startsWith(matrix.compiler.cc, 'clang')
        run: sudo apt-get install -y ${{ matrix.compiler.cc }}

      - name: Install dependencies
        run: |
          sudo apt-get -qq update
          sudo apt-get install -y             \
            ${{ matrix.compiler.subpackage }} \
            ninja-build libboost-all-dev      \
            libfmt-dev libarchive-dev libgit2-dev libspdlog-dev

      - name: Run CMake
        run: |
          cmake -B build -G Ninja                       \
            -DPOAC_CLANG_TIDY=OFF                       \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DPOAC_ENABLE_COVERAGE=${{ matrix.coverage }}

      - name: Build Poac
        run: ninja
        working-directory: build

      - name: Test Poac
        run: ctest --output-on-failure --verbose
        working-directory: build

      - name: Uninstall optional software for some commands
        run: sudo apt-get purge -y clang-format

      - name: Test Poac more
        run: ctest --output-on-failure --verbose
        working-directory: build

      - name: Print info of the executable file
        run: file ./poac
        working-directory: build

      - name: Print help
        run: ./poac --help
        working-directory: build

      - name: Test binary
        # FIXME: memory leak on Ninja
        # https://github.com/poacpm/poac/runs/6859118992?check_suite_focus=true#step:16:21
        if: matrix.build_type == 'Release'
        run: |
          ./poac create hello_world
          cd hello_world
          ../poac run
        working-directory: build

      - name: Print coverage
        if: success() && matrix.coverage == 'on'
        run: |
          lcov --directory . --capture --output-file coverage.info --gcov-tool "${CC_PATH/gcc/gcov}"
          lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
          lcov --list coverage.info
        env:
          CC_PATH: /usr/bin/${{ env.CC }}

      - name: Upload coverage to Codecov
        if: success() && matrix.coverage == 'on'
        uses: codecov/codecov-action@v3.1.1
        with:
          files: coverage.info
