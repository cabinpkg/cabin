name: Linux

on:
  push:
    branches: [ main ]
  pull_request:

env:
  BOOST_VERSION: 1.79.0

jobs:
  build-and-test:
    name: "build & test"
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        build_type: [ Debug, Release ]
        coverage: [ off ]
        compiler:
          - cc: clang-12
            cxx: clang++-12
            subpackage: lld-12
          - cc: clang-13
            cxx: clang++-13
            subpackage: lld-13
          - cc: clang-14
            cxx: clang++-14
            subpackage: lld-14
          - cc: gcc-11
            cxx: g++-11
            subpackage: binutils
          - cc: gcc-12
            cxx: g++-12
            subpackage: binutils
        include:
          - build_type: Debug
            coverage: on
            compiler:
              cc: gcc-12
              cxx: g++-12
              subpackage: binutils
    env:
      CC: ${{ matrix.compiler.cc }}
      CXX: ${{ matrix.compiler.cxx }}
      CACHE_KEY_PREFIX: v3-${{ github.ref }}-${{ github.job }}-${{ matrix.compiler.cc }}-${{ matrix.build_type }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup GCC
        if: startsWith(matrix.compiler.cc, 'gcc')
        run: sudo apt-get install -y -qq ${{ matrix.compiler.cxx }}

      - name: Setup Clang
        if: startsWith(matrix.compiler.cc, 'clang')
        run: sudo apt-get install -y -qq ${{ matrix.compiler.cc }}

      - name: Install Ninja, openssl, & ${{ matrix.compiler.subpackage }}
        run: |
          sudo apt-get -qq clean
          sudo apt-get -qq update
          sudo apt-get install -y -qq ninja-build libssl-dev ${{ matrix.compiler.subpackage }}

      - name: Restore & Cache CMake build results
        if: matrix.coverage != 'on'
        uses: actions/cache@v3.0.2
        with:
          path: build
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('CMakeLists.txt', 'cmake/*.cmake') }}

      - name: Restore & Cache boost (${{ env.BOOST_VERSION }})
        uses: actions/cache@v3.0.2
        id: boost-cache
        with:
          path: ${{ runner.temp }}/libs/boost
          key: ${{ env.CACHE_KEY_PREFIX }}-boost-${{ env.BOOST_VERSION }}
      - name: Install boost (${{ env.BOOST_VERSION }}) as static
        if: steps.boost-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ runner.temp }}/libs/boost
          git clone -q -b boost-${{ env.BOOST_VERSION }} --recursive https://github.com/boostorg/boost.git
          cd boost
          ./bootstrap.sh
          sudo ./b2 link=static install -j2 --prefix=${{ runner.temp }}/libs/boost || exit 0
        working-directory: ${{ runner.temp }}

      - name: Run CMake
        run: |
          cmake                                           \
            -B build                                      \
            -G Ninja                                      \
            -DPOAC_BUILD_TESTING=ON                       \
            -DPOAC_ENABLE_COVERAGE=${{ matrix.coverage }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}   \
            -DPOAC_DEPS_DIR=${{ runner.temp }}/libs

      - name: Build Poac
        run: ninja
        working-directory: build

      - name: Test Poac
        run: ctest --output-on-failure --verbose
        working-directory: build

      - name: Install required software to process UI tests
        run: sudo apt-get install -y -qq clang-format

      - name: UI Test
        run: ctest --output-on-failure --verbose
        working-directory: build

      - name: Print help
        run: ./poac --help
        working-directory: build

      - name: Print info of the executable file
        run: file ./poac
        working-directory: build

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3.1.0
        if: success() && matrix.coverage == 'on'
