name: Linux

on: [push, pull_request]

jobs:
  x86_64-unknown-linux-gnu:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [clang-6, clang-7, clang-8, clang-9, gcc-7, gcc-8, gcc-9]
        build_type: [Debug] # TODO: Release
    steps:
      - uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          login-server: docker.pkg.github.com
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Test
        run: |
          docker pull $DOCKER_IMAGE_NAME
          docker run --name builder --env POAC_GITHUB_API_TOKEN -v $PWD:/home/run $DOCKER_IMAGE_NAME \
            bash -c '
              cd /home/run && mkdir build && cd build &&
              cmake .. -Dpoac_BUILD_TEST=ON -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} &&
              make && ctest --output-on-failure --verbose &&
              cd ../ && file ./build/poac &&
              ./build/poac help'
          docker cp builder:/home/run/build/poac ./poac
        env:
          DOCKER_IMAGE_NAME: docker.pkg.github.com/poacpm/dockerfiles/x86_64-unknown-linux-gnu:${{ matrix.compiler }}
          POAC_GITHUB_API_TOKEN: ${{ secrets.POAC_GITHUB_API_TOKEN }}

      - uses: actions/upload-artifact@v1
        if: matrix.build_type == 'Release'
        with:
          name: x86_64-unknown-linux-gnu
          path: poac

      - name: Slack Notification
        uses: homoluctus/slatify@master
        if: always()
        with:
          type: ${{ job.status }}
          job_name: '*x86_64-unknown-linux-gnu (${{ matrix.compiler }}, ${{ matrix.build_type }})*'
          url: ${{ secrets.SLACK_WEBHOOK }}
          username: 'GitHub Action (${{ github.workflow }})'
          commit: true
          token: ${{ secrets.GITHUB_TOKEN }}

  mips-unknown-linux-gnu:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc-9]
        build_type: [Release] # TODO: Debug (libasan is not provided at mips architecture)
    steps:
      - uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          login-server: docker.pkg.github.com
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Test
        run: |
          docker pull $DOCKER_IMAGE_NAME
          docker run --name builder --env POAC_GITHUB_API_TOKEN -v $PWD:/home/run $DOCKER_IMAGE_NAME \
            bash -c '
              cd /home/run && mkdir build && cd build &&
              cmake .. -Dpoac_BUILD_TEST=OFF -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} &&
              make &&
              cd ../ && file ./build/poac'
          docker cp builder:/home/run/build/poac ./poac
        env:
          DOCKER_IMAGE_NAME: docker.pkg.github.com/poacpm/dockerfiles/mips-unknown-linux-gnu:${{ matrix.compiler }}
          POAC_GITHUB_API_TOKEN: ${{ secrets.POAC_GITHUB_API_TOKEN }}

      - uses: actions/upload-artifact@v1
        if: matrix.build_type == 'Release'
        with:
          name: mips-unknown-linux-gnu
          path: poac

      - name: Slack Notification
        uses: homoluctus/slatify@master
        if: always()
        with:
          type: ${{ job.status }}
          job_name: '*mips-unknown-linux-gnu (${{ matrix.compiler }}, ${{ matrix.build_type }})*'
          url: ${{ secrets.SLACK_WEBHOOK }}
          username: 'GitHub Action (${{ github.workflow }})'
          commit: true
          token: ${{ secrets.GITHUB_TOKEN }}

  powerpc-unknown-linux-gnu:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc-9]
        build_type: [Debug, Release]
    steps:
      - uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          login-server: docker.pkg.github.com
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Test
        run: |
          docker pull $DOCKER_IMAGE_NAME
          docker run --name builder --env POAC_GITHUB_API_TOKEN -v $PWD:/home/run $DOCKER_IMAGE_NAME \
            bash -c '
              cd /home/run && mkdir build && cd build &&
              cmake .. -Dpoac_BUILD_TEST=OFF -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} &&
              make &&
              cd ../ && file ./build/poac'
          docker cp builder:/home/run/build/poac ./poac
        env:
          DOCKER_IMAGE_NAME: docker.pkg.github.com/poacpm/dockerfiles/powerpc-unknown-linux-gnu:${{ matrix.compiler }}
          POAC_GITHUB_API_TOKEN: ${{ secrets.POAC_GITHUB_API_TOKEN }}

      - uses: actions/upload-artifact@v1
        if: matrix.build_type == 'Release'
        with:
          name: powerpc-unknown-linux-gnu
          path: poac

      - name: Slack Notification
        uses: homoluctus/slatify@master
        if: always()
        with:
          type: ${{ job.status }}
          job_name: '*powerpc-unknown-linux-gnu (${{ matrix.compiler }}, ${{ matrix.build_type }})*'
          url: ${{ secrets.SLACK_WEBHOOK }}
          username: 'GitHub Action (${{ github.workflow }})'
          commit: true
          token: ${{ secrets.GITHUB_TOKEN }}

  powerpc64-unknown-linux-gnu:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc-9]
        build_type: [Debug, Release]
    steps:
      - uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          login-server: docker.pkg.github.com
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Test
        run: |
          docker pull $DOCKER_IMAGE_NAME
          docker run --name builder --env POAC_GITHUB_API_TOKEN -v $PWD:/home/run $DOCKER_IMAGE_NAME \
            bash -c '
              cd /home/run && mkdir build && cd build &&
              cmake .. -Dpoac_BUILD_TEST=OFF -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} &&
              make &&
              cd ../ && file ./build/poac'
          docker cp builder:/home/run/build/poac ./poac
        env:
          DOCKER_IMAGE_NAME: docker.pkg.github.com/poacpm/dockerfiles/powerpc64-unknown-linux-gnu:${{ matrix.compiler }}
          POAC_GITHUB_API_TOKEN: ${{ secrets.POAC_GITHUB_API_TOKEN }}

      - uses: actions/upload-artifact@v1
        if: matrix.build_type == 'Release'
        with:
          name: powerpc64-unknown-linux-gnu
          path: poac

      - name: Slack Notification
        uses: homoluctus/slatify@master
        if: always()
        with:
          type: ${{ job.status }}
          job_name: '*powerpc64-unknown-linux-gnu (${{ matrix.compiler }}, ${{ matrix.build_type }})*'
          url: ${{ secrets.SLACK_WEBHOOK }}
          username: 'GitHub Action (${{ github.workflow }})'
          commit: true
          token: ${{ secrets.GITHUB_TOKEN }}

  powerpc64le-unknown-linux-gnu:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc-9]
        build_type: [Debug, Release]
    steps:
      - uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          login-server: docker.pkg.github.com
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Test
        run: |
          docker pull $DOCKER_IMAGE_NAME
          docker run --name builder --env POAC_GITHUB_API_TOKEN -v $PWD:/home/run $DOCKER_IMAGE_NAME \
            bash -c '
              cd /home/run && mkdir build && cd build &&
              cmake .. -Dpoac_BUILD_TEST=OFF -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} &&
              make &&
              cd ../ && file ./build/poac'
          docker cp builder:/home/run/build/poac ./poac
        env:
          DOCKER_IMAGE_NAME: docker.pkg.github.com/poacpm/dockerfiles/powerpc64le-unknown-linux-gnu:${{ matrix.compiler }}
          POAC_GITHUB_API_TOKEN: ${{ secrets.POAC_GITHUB_API_TOKEN }}

      - uses: actions/upload-artifact@v1
        if: matrix.build_type == 'Release'
        with:
          name: powerpc64le-unknown-linux-gnu
          path: poac

      - name: Slack Notification
        uses: homoluctus/slatify@master
        if: always()
        with:
          type: ${{ job.status }}
          job_name: '*powerpc64le-unknown-linux-gnu (${{ matrix.compiler }}, ${{ matrix.build_type }})*'
          url: ${{ secrets.SLACK_WEBHOOK }}
          username: 'GitHub Action (${{ github.workflow }})'
          commit: true
          token: ${{ secrets.GITHUB_TOKEN }}

  # TODO: publish build when tag is pushed (/^[0-9]+(\.[0-9]+){2}.*$/)
  # filters:
  #   branches:
  #     ignore: /.*/
  #   tags:
  #     only: /^[0-9]+(\.[0-9]+){2}.*$/
  # publish:
  #    docker:
  #      - image: circleci/golang:1.11
  #    steps:
  #      - attach_workspace:
  #          at: .
  #      - run: mkdir out
  #      - run: tar czf ./out/x86_64-unknown-linux-gnu.tar.gz ./poac
  #      - run: go get github.com/tcnksm/ghr
  #      - run: cp -r ./poac/.git ./
  #      - deploy: ghr -t $GITHUB_TOKEN $CIRCLE_TAG out
