name: Linux

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
env:
  OPENSSL_VERSION: 'OpenSSL_1_1_1h'
  BOOST_VERSION: 1.75.0
  TOML11_VERSION: 3.6.0
  LIBGIT2_VERSION: 1.1.0
  CLIPP_VERSION: master
  FMT_VERSION: 7.1.3
  MITAMA_RESULT_VERSION: develop
  PLOG_VERSION: 1.1.5

jobs:
  x86_64-unknown-linux-gnu:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        compiler: [ clang, gcc ]
        compiler_version: [ 7, 8, 9, 10 ]
        build_type: [ Debug ] # TODO: Release
        exclude:
          - compiler: gcc
            compiler_version: 7
        include:
          - compiler: clang
            cc_prefix: clang-
            cxx_prefix: clang++-
            package_prefix: clang-
          - compiler: gcc
            cc_prefix: gcc-
            cxx_prefix: g++-
            package_prefix: g++-
    env:
      CC: ${{ matrix.cc_prefix }}${{ matrix.compiler_version }}
      CXX: ${{ matrix.cxx_prefix }}${{ matrix.compiler_version }}
      CACHE_KEY_PREFIX: ${{ github.job }}-${{ matrix.package_prefix }}${{ matrix.compiler_version }}-${{ matrix.build_type }}
    steps:
      - uses: actions/checkout@v2.3.4

      - run: sudo apt-get -qq update
      - name: Install ${{ matrix.package_prefix }}${{ matrix.compiler_version }}
        run: sudo apt-get install -y -qq pkg-config cmake ${{ matrix.package_prefix }}${{ matrix.compiler_version }}

      - name: Install openssl
        if: matrix.compiler == 'clang'
        run: sudo apt-get install -y -qq libssl-dev

      - name: Restore & Cache openssl (${{ env.OPENSSL_VERSION }})
        if: matrix.compiler == 'gcc'
        uses: actions/cache@v2.1.3
        id: openssl-cache
        with:
          path: ${{ runner.temp }}/libs/openssl
          key: ${{ env.CACHE_KEY_PREFIX }}-openssl-${{ env.OPENSSL_VERSION }}
      - name: Install openssl (${{ env.OPENSSL_VERSION }}) as static
        if: matrix.compiler == 'gcc' && steps.openssl-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ runner.temp }}/libs/openssl
          git clone -q -b ${{ env.OPENSSL_VERSION }} https://github.com/openssl/openssl.git
          cd openssl
          ./config --static -static --prefix=${{ runner.temp }}/libs/openssl
          make
          sudo make install
          echo "OPENSSL_ROOT_DIR=${{ runner.temp }}/libs/openssl" >> $GITHUB_ENV
        working-directory: ${{ runner.temp }}

      - name: Restore & Cache boost (${{ env.BOOST_VERSION }})
        uses: actions/cache@v2.1.3
        id: boost-cache
        with:
          path: ${{ runner.temp }}/libs/boost
          key: ${{ env.CACHE_KEY_PREFIX }}-boost-${{ env.BOOST_VERSION }}
      - name: Install boost (${{ env.BOOST_VERSION }}) as static
        if: steps.boost-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ runner.temp }}/libs/boost
          git clone -q -b boost-${{ env.BOOST_VERSION }} --recursive https://github.com/boostorg/boost.git
          cd boost
          ./bootstrap.sh
          sudo ./b2 link=static install -j2 --prefix=${{ runner.temp }}/libs/boost || exit 0
        working-directory: ${{ runner.temp }}

      - name: Restore & Cache toml11 (${{ env.TOML11_VERSION }})
        uses: actions/cache@v2.1.3
        id: toml11-cache
        with:
          path: ${{ runner.temp }}/libs/toml11
          key: ${{ env.CACHE_KEY_PREFIX }}-toml11-${{ env.TOML11_VERSION }}
      - name: Install ToruNiina/toml11 (${{ env.TOML11_VERSION }}) (header-only)
        if: steps.toml11-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ runner.temp }}/libs/toml11
          git clone -q -b v${{ env.TOML11_VERSION }} https://github.com/ToruNiina/toml11.git
          mkdir toml11/build && cd toml11/build
          cmake ..                                                \
            -DCMAKE_INSTALL_PREFIX=${{ runner.temp }}/libs/toml11 \
            -Dtoml11_BUILD_TEST=OFF
          sudo make install
        working-directory: ${{ runner.temp }}

      - name: Restore & Cache libgit2 (${{ env.LIBGIT2_VERSION }})
        uses: actions/cache@v2.1.3
        id: libgit2-cache
        with:
          path: ${{ runner.temp }}/libs/libgit2
          key: ${{ env.CACHE_KEY_PREFIX }}-libgit2-${{ env.LIBGIT2_VERSION }}
      - name: Install libgit2 (${{ env.LIBGIT2_VERSION }}) as shared
        if: steps.libgit2-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ runner.temp }}/libs/libgit2
          git clone -q -b v${{ env.LIBGIT2_VERSION }} https://github.com/libgit2/libgit2.git
          mkdir libgit2/build && cd libgit2/build
          cmake ..                                                 \
            -DCMAKE_INSTALL_PREFIX=${{ runner.temp }}/libs/libgit2 \
            -DCMAKE_BUILD_TYPE=Release                             \
            -DBUILD_SHARED_LIBS=ON                                 \
            -DBUILD_CLAR=OFF                                       \
            -DCMAKE_C_FLAGS=-fPIC
          make
          sudo make install
        working-directory: ${{ runner.temp }}

      - name: Restore & Cache clipp (${{ env.CLIPP_VERSION }})
        uses: actions/cache@v2.1.3
        id: clipp-cache
        with:
          path: ${{ runner.temp }}/libs/clipp
          key: ${{ env.CACHE_KEY_PREFIX }}-clipp-${{ env.CLIPP_VERSION }}
      - name: Install muellan/clipp (${{ env.CLIPP_VERSION }}) (header-only)
        if: steps.clipp-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ runner.temp }}/libs/clipp
          git clone -q -b ${{ env.CLIPP_VERSION }} https://github.com/muellan/clipp.git
          mkdir clipp/build && cd clipp/build
          cmake .. -DCMAKE_INSTALL_PREFIX=${{ runner.temp }}/libs/clipp
          sudo make install
        working-directory: ${{ runner.temp }}

      - name: Restore & Cache fmt (${{ env.FMT_VERSION }})
        uses: actions/cache@v2.1.3
        id: fmt-cache
        with:
          path: ${{ runner.temp }}/libs/fmt
          key: ${{ env.CACHE_KEY_PREFIX }}-fmt-${{ env.FMT_VERSION }}
      - name: Install fmtlib/fmt (${{ env.FMT_VERSION }}) (header-only)
        if: steps.fmt-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ runner.temp }}/libs/fmt
          git clone -q -b ${{ env.FMT_VERSION }} https://github.com/fmtlib/fmt.git
          mkdir fmt/build && cd fmt/build
          cmake .. -DCMAKE_INSTALL_PREFIX=${{ runner.temp }}/libs/fmt
          sudo make install
        working-directory: ${{ runner.temp }}

#      - name: Restore & Cache mitama-result (${{ env.MITAMA_RESULT_VERSION }})
#        uses: actions/cache@v2.1.3
#        id: mitama-result-cache
#        with:
#          path: ${{ runner.temp }}/libs/mitama-result
#          key: ${{ env.CACHE_KEY_PREFIX }}-mitama-result-${{ env.MITAMA_RESULT_VERSION }}
      - name: Install LoliGothick/mitama-cpp-result (${{ env.MITAMA_RESULT_VERSION }}) (header-only) (always up-to-date)
#        if: steps.mitama-result-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ runner.temp }}/libs/mitama-result
          git clone -q -b ${{ env.MITAMA_RESULT_VERSION }} https://github.com/LoliGothick/mitama-cpp-result.git
          mkdir mitama-cpp-result/build && cd mitama-cpp-result/build
          cmake .. -DCMAKE_INSTALL_PREFIX=${{ runner.temp }}/libs/mitama-result
          sudo make install
        working-directory: ${{ runner.temp }}

      - name: Restore & Cache plog (${{ env.PLOG_VERSION }})
        uses: actions/cache@v2.1.3
        id: plog-cache
        with:
          path: ${{ runner.temp }}/libs/plog
          key: ${{ env.CACHE_KEY_PREFIX }}-plog-${{ env.PLOG_VERSION }}
      - name: Install plog (${{ env.PLOG_VERSION }}) (header-only)
        if: steps.plog-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ runner.temp }}/libs/plog
          git clone -q -b ${{ env.PLOG_VERSION }} https://github.com/SergiusTheBest/plog.git
          mkdir plog/build && cd plog/build
          cmake .. -DCMAKE_INSTALL_PREFIX=${{ runner.temp }}/libs/plog
          sudo make install
        working-directory: ${{ runner.temp }}

      - run: mkdir build

      - name: Build Poac
        run: |
          cmake ..                                               \
            -DBUILD_TESTING=ON                                   \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}          \
            -DBOOST_ROOT=${{ runner.temp }}/libs/boost           \
            -DBOOST_LIBRARYDIR=${{ runner.temp }}/libs/boost/lib \
            -DTOML11_DIR=${{ runner.temp }}/libs/toml11          \
            -DGIT2_DIR=${{ runner.temp }}/libs/libgit2           \
            -DCLIPP_DIR=${{ runner.temp }}/libs/clipp            \
            -DFMT_DIR=${{ runner.temp }}/libs/fmt                \
            -DPLOG_DIR=${{ runner.temp }}/libs/plog              \
            -DMITAMA_RESULT_DIR=${{ runner.temp }}/libs/mitama-result
          make
        working-directory: build

      - name: Test Poac
        if: matrix.compiler == 'clang' || (matrix.compiler == 'gcc' && matrix.compiler_version != 8)
        run: ctest --output-on-failure --verbose
        working-directory: build

      - name: Running test
        if: matrix.compiler == 'clang' || (matrix.compiler == 'gcc' && matrix.compiler_version != 8)
        run: ./poac help
        working-directory: build

      - name: Print info of the executable file
        run: file ./poac
        working-directory: build

      - name: Upload pre-built binary
        uses: actions/upload-artifact@v2.2.1
        if: matrix.build_type == 'Release'
        with:
          name: ${{ github.job }}-${{ matrix.package_prefix }}${{ matrix.compiler_version }}
          path: poac

  powerpc-unknown-linux-gnu:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        target_platform: [ powerpc64, powerpc64le ] # TODO: powerpc
        gcc_version: [ 9, 10 ]
        build_type: [ Debug ] # TODO: Release
        include:
#          - target_platform: powerpc
#            platform_flag: linux-ppc
          - target_platform: powerpc64
            platform_flag: linux-ppc64
          - target_platform: powerpc64le
            platform_flag: linux-ppc64le
    env:
      CACHE_KEY_PREFIX: ${{ github.job }}${{ matrix.gcc_version }}-${{ matrix.target_platform }}-${{ matrix.build_type }}
    steps:
      - uses: actions/checkout@v2.3.4

      - run: sudo apt-get -qq update
      - name: Install g++-${{ matrix.gcc_version }}-${{ matrix.target_platform }}-linux-gnu
        run: sudo apt-get install -y -qq pkg-config cmake g++-${{ matrix.gcc_version }}-${{ matrix.target_platform }}-linux-gnu

      - name: Link the installed compiler
        run: |
          sudo ln -sf                                                                      \
            /usr/bin/${{ matrix.target_platform }}-linux-gnu-gcc-${{ matrix.gcc_version }} \
            /usr/bin/${{ matrix.target_platform }}-linux-gnu-gcc

      - name: Restore & Cache openssl (${{ env.OPENSSL_VERSION }})
        uses: actions/cache@v2.1.3
        id: openssl-cache
        with:
          path: ${{ runner.temp }}/libs/openssl
          key: ${{ env.CACHE_KEY_PREFIX }}-openssl-${{ env.OPENSSL_VERSION }}
      - name: Install openssl (${{ env.OPENSSL_VERSION }}) as static
        if: steps.openssl-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ runner.temp }}/libs/openssl
          git clone -q -b ${{ env.OPENSSL_VERSION }} https://github.com/openssl/openssl.git
          cd openssl
          ./Configure                                                       \
            ${{ matrix.platform_flag }}                                     \
            -static                                                         \
            --cross-compile-prefix=${{ matrix.target_platform }}-linux-gnu- \
            --prefix=${{ runner.temp }}/libs/openssl
          make
          sudo make install
        working-directory: ${{ runner.temp }}

      - name: Restore & Cache boost (${{ env.BOOST_VERSION }})
        uses: actions/cache@v2.1.3
        id: boost-cache
        with:
          path: ${{ runner.temp }}/libs/boost
          key: ${{ env.CACHE_KEY_PREFIX }}-boost-${{ env.BOOST_VERSION }}
      - name: Install boost (${{ env.BOOST_VERSION }}) as static
        if: steps.boost-cache.outputs.cache-hit != 'true'
        run: |
          git clone -q -b boost-1.73.0 --recursive https://github.com/boostorg/boost.git
          cd boost
          sudo apt-get update
          sudo apt-get install -y g++-${{ matrix.gcc_version }}
          sudo ln -sf /usr/bin/g++-${{ matrix.gcc_version }} /usr/bin/g++
          ./bootstrap.sh
          sudo rm -rf /usr/bin/g++
          sudo ln -sf /usr/bin/${{ matrix.target_platform }}-linux-gnu-g++-${{ matrix.gcc_version }} /usr/bin/g++
          sudo ./b2 link=static install -j2 --prefix=${{ runner.temp }}/libs/boost || exit 0
        working-directory: ${{ runner.temp }}

      - name: Define compiler variables
        run: |
          echo "CC=${{ matrix.target_platform }}-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX=${{ matrix.target_platform }}-linux-gnu-g++-${{ matrix.gcc_version }}" >> $GITHUB_ENV

      - name: Restore & Cache toml11 (${{ env.TOML11_VERSION }})
        uses: actions/cache@v2.1.3
        id: toml11-cache
        with:
          path: ${{ runner.temp }}/libs/toml11
          key: ${{ env.CACHE_KEY_PREFIX }}-toml11-${{ env.TOML11_VERSION }}
      - name: Install ToruNiina/toml11 (${{ env.TOML11_VERSION }}) (header-only)
        if: steps.toml11-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ runner.temp }}/libs/toml11
          git clone -q -b v${{ env.TOML11_VERSION }} https://github.com/ToruNiina/toml11.git
          mkdir toml11/build && cd toml11/build
          cmake ..                                                \
            -DCMAKE_INSTALL_PREFIX=${{ runner.temp }}/libs/toml11 \
            -Dtoml11_BUILD_TEST=OFF
          sudo make install
        working-directory: ${{ runner.temp }}

      - name: Restore & Cache libgit2 (${{ env.LIBGIT2_VERSION }})
        uses: actions/cache@v2.1.3
        id: libgit2-cache
        with:
          path: ${{ runner.temp }}/libs/libgit2
          key: ${{ env.CACHE_KEY_PREFIX }}-libgit2-${{ env.LIBGIT2_VERSION }}
      - name: Install libgit2 (${{ env.LIBGIT2_VERSION }}) as shared
        if: steps.libgit2-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ runner.temp }}/libs/libgit2
          git clone -q -b v${{ env.LIBGIT2_VERSION }} https://github.com/libgit2/libgit2.git
          mkdir libgit2/build && cd libgit2/build
          cmake ..                                                 \
            -DCMAKE_INSTALL_PREFIX=${{ runner.temp }}/libs/libgit2 \
            -DCMAKE_BUILD_TYPE=Release                             \
            -DBUILD_SHARED_LIBS=ON                                 \
            -DBUILD_CLAR=OFF                                       \
            -DOPENSSL_ROOT_DIR=${{ runner.temp }}/libs/openssl
          make
          sudo make install
        working-directory: ${{ runner.temp }}

      - name: Restore & Cache clipp (${{ env.CLIPP_VERSION }})
        uses: actions/cache@v2.1.3
        id: clipp-cache
        with:
          path: ${{ runner.temp }}/libs/clipp
          key: ${{ env.CACHE_KEY_PREFIX }}-clipp-${{ env.CLIPP_VERSION }}
      - name: Install muellan/clipp (${{ env.CLIPP_VERSION }}) (header-only)
        if: steps.clipp-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ runner.temp }}/libs/clipp
          git clone -q -b ${{ env.CLIPP_VERSION }} https://github.com/muellan/clipp.git
          mkdir clipp/build && cd clipp/build
          cmake .. -DCMAKE_INSTALL_PREFIX=${{ runner.temp }}/libs/clipp
          sudo make install
        working-directory: ${{ runner.temp }}

      - name: Restore & Cache fmt (${{ env.FMT_VERSION }})
        uses: actions/cache@v2.1.3
        id: fmt-cache
        with:
          path: ${{ runner.temp }}/libs/fmt
          key: ${{ env.CACHE_KEY_PREFIX }}-fmt-${{ env.FMT_VERSION }}
      - name: Install fmtlib/fmt (${{ env.FMT_VERSION }}) (header-only)
        if: steps.fmt-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ runner.temp }}/libs/fmt
          git clone -q -b ${{ env.FMT_VERSION }} https://github.com/fmtlib/fmt.git
          mkdir fmt/build && cd fmt/build
          cmake .. -DCMAKE_INSTALL_PREFIX=${{ runner.temp }}/libs/fmt
          sudo make install
        working-directory: ${{ runner.temp }}

#      - name: Restore & Cache mitama-result (${{ env.MITAMA_RESULT_VERSION }})
#        uses: actions/cache@v2.1.3
#        id: mitama-result-cache
#        with:
#          path: ${{ runner.temp }}/libs/mitama-result
#          key: ${{ env.CACHE_KEY_PREFIX }}-mitama-result-${{ env.MITAMA_RESULT_VERSION }}
      - name: Install LoliGothick/mitama-cpp-result (${{ env.MITAMA_RESULT_VERSION }}) (header-only) (always up-to-date)
#        if: steps.mitama-result-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ runner.temp }}/libs/mitama-result
          git clone -q -b ${{ env.MITAMA_RESULT_VERSION }} https://github.com/LoliGothick/mitama-cpp-result.git
          mkdir mitama-cpp-result/build && cd mitama-cpp-result/build
          cmake .. -DCMAKE_INSTALL_PREFIX=${{ runner.temp }}/libs/mitama-result
          sudo make install
        working-directory: ${{ runner.temp }}

      - name: Restore & Cache plog (${{ env.PLOG_VERSION }})
        uses: actions/cache@v2.1.3
        id: plog-cache
        with:
          path: ${{ runner.temp }}/libs/plog
          key: ${{ env.CACHE_KEY_PREFIX }}-plog-${{ env.PLOG_VERSION }}
      - name: Install plog (${{ env.PLOG_VERSION }}) (header-only)
        if: steps.plog-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ runner.temp }}/libs/plog
          git clone -q -b ${{ env.PLOG_VERSION }} https://github.com/SergiusTheBest/plog.git
          mkdir plog/build && cd plog/build
          cmake .. -DCMAKE_INSTALL_PREFIX=${{ runner.temp }}/libs/plog
          sudo make install
        working-directory: ${{ runner.temp }}

      - run: mkdir build

      - name: Build Poac
        run: |
          cmake ..                                               \
            -DBUILD_TESTING=ON                                   \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}          \
            -DBOOST_ROOT=${{ runner.temp }}/libs/boost           \
            -DBOOST_LIBRARYDIR=${{ runner.temp }}/libs/boost/lib \
            -DTOML11_DIR=${{ runner.temp }}/libs/toml11          \
            -DGIT2_DIR=${{ runner.temp }}/libs/libgit2           \
            -DOPENSSL_ROOT_DIR=${{ runner.temp }}/libs/openssl   \
            -DCLIPP_DIR=${{ runner.temp }}/libs/clipp            \
            -DFMT_DIR=${{ runner.temp }}/libs/fmt                \
            -DPLOG_DIR=${{ runner.temp }}/libs/plog              \
            -DMITAMA_RESULT_DIR=${{ runner.temp }}/libs/mitama-result
          make
        working-directory: build

      - name: Print info of the executable file
        run: file ./poac
        working-directory: build

      - name: Upload pre-built binary
        uses: actions/upload-artifact@v2.2.1
        if: matrix.build_type == 'Release'
        with:
          name: ${{ matrix.target_platform }}-unknown-linux-gnu
          path: poac
