name: Linux

on:
  push:
    branches: [ main ]
  pull_request:

env:
  OPENSSL_VERSION: openssl-3.0.0
  BOOST_VERSION: 1.76.0

jobs:
  x86_64-unknown-linux-gnu:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        build_type: [ Debug, Release ]
        coverage: [ off ]
        compiler:
          - cc: clang-10
            cxx: clang++-10
            package: clang-10
            subpackage: lld-10
          - cc: clang-11
            cxx: clang++-11
            package: clang-11
            subpackage: lld-11
          - cc: gcc-10
            cxx: g++-10
            package: g++-10
            subpackage: binutils
        include:
          - build_type: Debug
            coverage: on
            compiler:
              cc: gcc-10
              cxx: g++-10
              package: g++-10
              subpackage: binutils
    env:
      CC: ${{ matrix.compiler.cc }}
      CXX: ${{ matrix.compiler.cxx }}
      CACHE_KEY_PREFIX: v2-${{ github.ref }}-${{ github.job }}-${{ matrix.compiler.package }}-${{ matrix.build_type }}
    steps:
      - uses: actions/checkout@v2.3.4

      - name: Install ${{ matrix.compiler.package }} and ${{ matrix.compiler.subpackage }}
        run: |
          sudo apt-get -qq clean
          sudo apt-get -qq update
          sudo apt-get install -y -qq pkg-config cmake ninja-build ${{ matrix.compiler.package }} ${{ matrix.compiler.subpackage }}

      - name: Restore & Cache CMake build results
        if: matrix.coverage != 'on'
        uses: actions/cache@v2.1.7
        with:
          path: build
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('CMakeLists.txt', 'cmake/*.cmake') }}

      - name: Install openssl
        if: startsWith(matrix.compiler.cc, 'clang')
        run: sudo apt-get install -y -qq libssl-dev

      - name: Restore & Cache openssl (${{ env.OPENSSL_VERSION }})
        if: startsWith(matrix.compiler.cc, 'gcc')
        uses: actions/cache@v2.1.7
        id: openssl-cache
        with:
          path: ${{ runner.temp }}/libs/openssl
          key: ${{ env.CACHE_KEY_PREFIX }}-openssl-${{ env.OPENSSL_VERSION }}
      - name: Install openssl (${{ env.OPENSSL_VERSION }}) as static
        if: startsWith(matrix.compiler.cc, 'gcc') && steps.openssl-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ runner.temp }}/libs/openssl
          git clone -q -b ${{ env.OPENSSL_VERSION }} https://github.com/openssl/openssl.git
          cd openssl
          ./config --static -static --prefix=${{ runner.temp }}/libs/openssl
          make
          sudo make install
          echo "OPENSSL_ROOT_DIR=${{ runner.temp }}/libs/openssl" >> $GITHUB_ENV
        working-directory: ${{ runner.temp }}

      - name: Restore & Cache boost (${{ env.BOOST_VERSION }})
        uses: actions/cache@v2.1.7
        id: boost-cache
        with:
          path: ${{ runner.temp }}/libs/boost
          key: ${{ env.CACHE_KEY_PREFIX }}-boost-${{ env.BOOST_VERSION }}
      - name: Install boost (${{ env.BOOST_VERSION }}) as static
        if: steps.boost-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ runner.temp }}/libs/boost
          git clone -q -b boost-${{ env.BOOST_VERSION }} --recursive https://github.com/boostorg/boost.git
          cd boost
          ./bootstrap.sh
          sudo ./b2 link=static install -j2 --prefix=${{ runner.temp }}/libs/boost || exit 0
        working-directory: ${{ runner.temp }}

      - run: mkdir -p build

      - name: Build Poac
        run: |
          cmake ..                                        \
            -G Ninja                                      \
            -DBUILD_TESTING=ON                            \
            -DPOAC_ENABLE_COVERAGE=${{ matrix.coverage }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}   \
            -DPOAC_DEPS_DIR=${{ runner.temp }}/libs
          ninja
        working-directory: build

      - name: Test Poac
        if: matrix.compiler.cxx != 'g++-8'
        run: ctest --output-on-failure --verbose
        working-directory: build

      - name: Running test
        if: matrix.compiler.cxx != 'g++-8'
        run: ./poac help
        working-directory: build

      - name: Print info of the executable file
        run: file ./poac
        working-directory: build

      - name: Upload pre-built binary
        uses: actions/upload-artifact@v2.3.1
        if: matrix.build_type == 'Release'
        with:
          name: ${{ github.job }}-${{ matrix.compiler.package }}
          path: ./build/poac

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2.1.0
        if: success() && matrix.coverage == 'on'
