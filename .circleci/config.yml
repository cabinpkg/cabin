version: 2.1

executors:
  cpp:
    parameters:
      arch:
        description: "Architecture"
        type: string
      compiler:
        description: "Compiler Name"
        type: enum
        enum: ["gcc", "clang"]
      version:
        description: "Compiler Version"
        type: integer
    docker:
      - image: poacpm/<< parameters.arch >>:<< parameters.compiler >>-<< parameters.version >>

commands:
  poac-install:
    steps:
      - restore_cache:
          keys: # restores saved poac cache
            - v1-poac-cache-{{ checksum "poac.lock" }}
            - v1-poac-cache-{{ checksum "poac.yml" }}
            - v1-poac-cache-{{ .Branch }}
            - v1-poac-cache
      - run: poac install # source file only (no pre-built)
      - save_cache:
          key: v1-poac-cache-{{ checksum "poac.lock" }}
          paths: "deps"
      - save_cache:
          key: v1-poac-cache-{{ checksum "poac.yml" }}
          paths: "deps"
      - save_cache:
          key: v1-poac-cache-{{ .Branch }}
          paths: "deps"
      - save_cache:
          key: v1-poac-cache
          paths: "deps"

  default-build:
    parameters:
      build-type:
        description: "CMAKE_BUILD_TYPE"
        type: enum
        enum: ["Debug", "Release"]
      build-test:
        description: "poac_BUILD_TEST"
        type: boolean
        default: ON
    steps:
      - run: uname -sm
      - run: mkdir build
      - run:
          working_directory: build
          command: >
            cmake ..
            <<# parameters.build-test >>-Dpoac_BUILD_TEST=ON<</ parameters.build-test >>
            -DCMAKE_BUILD_TYPE=<< parameters.build-type >> &&
            make
      - run: file ./build/poac

  default-test:
    steps:
      - run:
          command: >
            ./build/poac test --report --
                --output_format=XML
                --log_level=all
                --report_level=no
      - store_test_results:
          path: _build/test/report

jobs:
  checkout_code:
    docker:
      - image: circleci/buildpack-deps:disco
    steps:
      - checkout
#      - poac-install
      - persist_to_workspace:
          root: .
          paths: .

  build:
    parameters:
      exec:
        type: executor
      build-type:
        type: string
      build-test:
        type: boolean
      after-build:
        type: steps
        default: []
    executor: << parameters.exec >>
    steps:
      - attach_workspace:
          at: .
      - default-build:
          build-type: << parameters.build-type >>
          build-test: << parameters.build-test >>
      - when:
          condition: << parameters.build-test >>
          steps:
            - run:
                working_directory: build
                command: ctest --output-on-failure --verbose
      - steps: << parameters.after-build >>
#      - default-test

  artifact_build:
    parameters:
      exec:
        type: executor
      build-type:
        type: string
    executor: << parameters.exec >>
    working_directory: /tmp/workspace/x86_64-unknown-linux-gnu
    steps:
      - attach_workspace:
          at: /tmp/workspace/x86_64-unknown-linux-gnu
      - default-build:
          build-type: << parameters.build-type >>
      - persist_to_workspace:
          root: /tmp/workspace
          paths: x86_64-unknown-linux-gnu

  publish:
    docker:
      - image: circleci/golang:1.11
    steps:
      - attach_workspace:
          at: .
      - run: mkdir out
      - run: tar czf ./out/x86_64-unknown-linux-gnu.tar.gz ./poac
      - run: go get github.com/tcnksm/ghr
      - run: cp -r ./poac/.git ./
      - deploy: ghr -t $GITHUB_TOKEN $CIRCLE_TAG out
#      - run: poac publish

workflows:
  version: 2
  builds:
    jobs:
      - checkout_code
      - build:
          exec:
            name: cpp
            arch: x86_64-unknown-linux-gnu
            compiler: gcc
            version: 7
          build-type: "Debug"
          build-test: ON
          after-build:
            - run: ./build/poac help
          requires:
            - checkout_code
      - build:
          exec:
            name: cpp
            arch: x86_64-unknown-linux-gnu
            compiler: gcc
            version: 8
          build-type: "Debug"
          build-test: ON
          after-build:
            - run: ./build/poac help
          requires:
            - checkout_code
      - build:
          exec:
            name: cpp
            arch: x86_64-unknown-linux-gnu
            compiler: gcc
            version: 9
          build-type: "Debug"
          build-test: ON
          after-build:
            - run: ./build/poac help
          requires:
            - checkout_code
      - build:
          exec:
            name: cpp
            arch: x86_64-unknown-linux-gnu
            compiler: clang
            version: 6
          build-type: "Debug"
          build-test: ON
          after-build:
            - run: ./build/poac help
          requires:
            - checkout_code
      - build:
          exec:
            name: cpp
            arch: x86_64-unknown-linux-gnu
            compiler: clang
            version: 7
          build-type: "Debug"
          build-test: ON
          after-build:
            - run: ./build/poac help
          requires:
            - checkout_code
      - build:
          exec:
            name: cpp
            arch: x86_64-unknown-linux-gnu
            compiler: clang
            version: 8
          build-type: "Debug"
          build-test: ON
          after-build:
            - run: ./build/poac help
          requires:
            - checkout_code

      # libasan is not provided at mips architecture
#      - build:
#          exec:
#            name: cpp
#            arch: mips-unknown-linux-gnu
#            compiler: gcc
#            version: 9
#          build-type: "Debug"
#          build-test: OFF
#          requires:
#            - checkout_code
      - build:
          exec:
            name: cpp
            arch: mips-unknown-linux-gnu
            compiler: gcc
            version: 9
          build-type: "Release"
          build-test: OFF
          requires:
            - checkout_code

      - build:
          exec:
            name: cpp
            arch: powerpc-unknown-linux-gnu
            compiler: gcc
            version: 9
          build-type: "Debug"
          build-test: OFF
          requires:
            - checkout_code
      - build:
          exec:
            name: cpp
            arch: powerpc-unknown-linux-gnu
            compiler: gcc
            version: 9
          build-type: "Release"
          build-test: OFF
          requires:
            - checkout_code

      - build:
          exec:
            name: cpp
            arch: powerpc64-unknown-linux-gnu
            compiler: gcc
            version: 9
          build-type: "Debug"
          build-test: OFF
          requires:
            - checkout_code
      - build:
          exec:
            name: cpp
            arch: powerpc64-unknown-linux-gnu
            compiler: gcc
            version: 9
          build-type: "Release"
          build-test: OFF
          requires:
            - checkout_code

      - build:
          exec:
            name: cpp
            arch: powerpc64le-unknown-linux-gnu
            compiler: gcc
            version: 9
          build-type: "Debug"
          build-test: OFF
          requires:
            - checkout_code
      - build:
          exec:
            name: cpp
            arch: powerpc64le-unknown-linux-gnu
            compiler: gcc
            version: 9
          build-type: "Release"
          build-test: OFF
          requires:
            - checkout_code
  release:
    jobs:
      - checkout_code:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+(\.[0-9]+){2}.*$/
      - artifact_build:
          exec:
            name: cpp
            arch: x86_64-unknown-linux-gnu
            compiler: gcc
            version: 9
          build-type: "Release"
          requires:
            - checkout_code
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+(\.[0-9]+){2}.*$/
      - publish:
          requires:
            - artifact_build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+(\.[0-9]+){2}.*$/
